/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 05 22:58:01 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeCssIdentifier();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("t^{uYoG>~a$;A;");
      tokenQueue0.consumeCssIdentifier();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.chompToIgnoreCase("9{k1b0e3No^c!l");
      tokenQueue0.consumeCssIdentifier();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      tokenQueue0.consumeElementSelector();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#VjWsn-c;U7X$QuY;Z,");
      tokenQueue0.remainder();
      tokenQueue0.consumeTagName();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("V");
      tokenQueue0.consumeWord();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue.unescape("80tR# L</Jy(Y\\*v`");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('v', '.');
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#VjWsn-c;U7X$QuY;Z,");
      Character character0 = Character.valueOf('_');
      tokenQueue0.addFirst(character0);
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('_', '_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '_#VjWsn-c;U7X$QuY;Z,'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-wx0B\"QV");
      tokenQueue0.addFirst("-wx0B\"QV");
      Character character0 = Character.valueOf('$');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('$', '$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '-wx0B\"QV-wx0B\"QV'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = new Character('\"');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\"', '\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-wx0B\"x'IQV");
      Character character0 = new Character('7');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('7', '7');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '-wx0B'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '\'');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("l3='[wC`kH\"I |s3");
      Character character0 = new Character('7');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('7', '7');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'l3='
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#VjWsn-c;U7X$QuY;Z,");
      Character character0 = Character.valueOf('\\');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\\', '\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '#VjWsn-c;U7X$QuY;Z,'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_~r@yH\"fN=h5E;");
      tokenQueue0.advance();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_~r@yH\"fN=h5E;";
      stringArray0[1] = "_~r@yH\"fN=h5E;";
      stringArray0[2] = "_~r@yH\"fN=h5E;";
      stringArray0[3] = "qPUp?&dgLKa\"";
      stringArray0[4] = "_~r@yH\"fN=h5E;";
      stringArray0[5] = "_~r@yH\"fN=h5E;";
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("9z;+Jq9Mp");
      tokenQueue0.advance();
      tokenQueue0.chompToIgnoreCase("9z;+Jq9Mp");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue did not match expected sequence");
      tokenQueue0.advance();
      tokenQueue0.consumeToIgnoreCase("Queue did not match expected sequence");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("myP:VVFsFxg&");
      tokenQueue0.chompToIgnoreCase("myP:VVFsFxg&");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil");
      tokenQueue0.consumeAttributeKey();
      // Undeclared exception!
      try { 
        tokenQueue0.consume("org");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("org.jsoup.helper.StringUtil");
      tokenQueue0.consume("");
      assertEquals("org.jsoup.helper.StringUtil", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<L*Hp+1Efw;E");
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.remainder();
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(" ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("t^{uYoG>~a$;A;");
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(boolean0);
      assertTrue(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("sp_Lj4E3UK");
      tokenQueue0.consumeAttributeKey();
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                ");
      tokenQueue0.chompTo("                ");
      assertEquals('\u0000', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("</|y8c}olIqo',");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<L*Hp+1Efw;E");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#VjWsn-c;U7X$QuY;Z,");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("#VjWsn-c;U7X$QuY;Z,");
      tokenQueue0.remainder();
      assertTrue(tokenQueue0.isEmpty());
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("t^{uYoG>~a$;A;");
      tokenQueue0.addFirst("\"~BL:Yh9");
      tokenQueue0.chompBalanced('g', '(');
      tokenQueue0.advance();
      tokenQueue0.consumeTagName();
      assertEquals("^{uYoG>~a$;A;", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      char[] charArray0 = new char[0];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<L*Hp+1Efw;E");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", string0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<L*Hp+1Efw;E");
      char char0 = tokenQueue0.peek();
      assertEquals('<', char0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<L*Hp+1Efw;E");
      String string0 = tokenQueue0.toString();
      assertEquals("<L*Hp+1Efw;E", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("N6|>uk(i\"iv=]");
      tokenQueue0.matchesCS("");
      assertEquals('N', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_~r@yH\"fN=h5E;");
      tokenQueue0.chompTo("*|");
      assertEquals('\u0000', tokenQueue0.peek());
  }
}
